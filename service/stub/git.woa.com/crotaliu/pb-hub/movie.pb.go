// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: movie.proto

package pb_hub

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 用户注册 请求参数
type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"` // 用户名
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 检查用户名重复 请求参数
type CheckUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"` // 用户名
}

func (x *CheckUserNameReq) Reset() {
	*x = CheckUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameReq) ProtoMessage() {}

func (x *CheckUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{1}
}

func (x *CheckUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// 用户登录 请求参数
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"` // 用户名
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 获取视频列表 请求参数
type GetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MName        string   `protobuf:"bytes,1,opt,name=mName,proto3" json:"mName,omitempty"`                     // 电影名
	MTypeID      []uint32 `protobuf:"varint,2,rep,packed,name=mTypeID,proto3" json:"mTypeID,omitempty"`         // 电影类型ID
	MCountryID   []uint32 `protobuf:"varint,3,rep,packed,name=mCountryID,proto3" json:"mCountryID,omitempty"`   // 电影制片国家/地区ID
	MLanguageID  []uint32 `protobuf:"varint,4,rep,packed,name=mLanguageID,proto3" json:"mLanguageID,omitempty"` // 电影语言ID
	MDateYear    []uint32 `protobuf:"varint,5,rep,packed,name=mDateYear,proto3" json:"mDateYear,omitempty"`     // 电影上映年份
	MDouBanScore uint32   `protobuf:"varint,6,opt,name=mDouBanScore,proto3" json:"mDouBanScore,omitempty"`      // 豆瓣评分
	PageNo       uint32   `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                  // 页码
	PageSize     uint32   `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`              // 容量
}

func (x *GetListReq) Reset() {
	*x = GetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListReq) ProtoMessage() {}

func (x *GetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListReq.ProtoReflect.Descriptor instead.
func (*GetListReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{3}
}

func (x *GetListReq) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *GetListReq) GetMTypeID() []uint32 {
	if x != nil {
		return x.MTypeID
	}
	return nil
}

func (x *GetListReq) GetMCountryID() []uint32 {
	if x != nil {
		return x.MCountryID
	}
	return nil
}

func (x *GetListReq) GetMLanguageID() []uint32 {
	if x != nil {
		return x.MLanguageID
	}
	return nil
}

func (x *GetListReq) GetMDateYear() []uint32 {
	if x != nil {
		return x.MDateYear
	}
	return nil
}

func (x *GetListReq) GetMDouBanScore() uint32 {
	if x != nil {
		return x.MDouBanScore
	}
	return 0
}

func (x *GetListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取视频排行榜 请求参数
type GetLeaderboardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MType uint32 `protobuf:"varint,1,opt,name=mType,proto3" json:"mType,omitempty"` // 类型，1-播放榜 2-收藏榜 3-点赞榜
}

func (x *GetLeaderboardReq) Reset() {
	*x = GetLeaderboardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderboardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardReq) ProtoMessage() {}

func (x *GetLeaderboardReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardReq.ProtoReflect.Descriptor instead.
func (*GetLeaderboardReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{4}
}

func (x *GetLeaderboardReq) GetMType() uint32 {
	if x != nil {
		return x.MType
	}
	return 0
}

// 视频详情 请求参数
type GetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid uint32 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"` // 视频 ID
}

func (x *GetInfoReq) Reset() {
	*x = GetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoReq) ProtoMessage() {}

func (x *GetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoReq.ProtoReflect.Descriptor instead.
func (*GetInfoReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{5}
}

func (x *GetInfoReq) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

// 记录 请求参数
type RecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid   uint32 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`     // 视频 ID
	MType uint32 `protobuf:"varint,2,opt,name=mType,proto3" json:"mType,omitempty"` // 记录类型
}

func (x *RecordReq) Reset() {
	*x = RecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordReq) ProtoMessage() {}

func (x *RecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordReq.ProtoReflect.Descriptor instead.
func (*RecordReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{6}
}

func (x *RecordReq) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *RecordReq) GetMType() uint32 {
	if x != nil {
		return x.MType
	}
	return 0
}

// 增加/更新视频 请求参数
type ManageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ManageInfoReq_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 批量添加/更新视频
}

func (x *ManageInfoReq) Reset() {
	*x = ManageInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageInfoReq) ProtoMessage() {}

func (x *ManageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageInfoReq.ProtoReflect.Descriptor instead.
func (*ManageInfoReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{7}
}

func (x *ManageInfoReq) GetList() []*ManageInfoReq_List {
	if x != nil {
		return x.List
	}
	return nil
}

// 修改视频状态 请求参数
type UpdateInfoStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MStatus uint32 `protobuf:"varint,1,opt,name=mStatus,proto3" json:"mStatus,omitempty"` // 状态，1-上线 2-下线
}

func (x *UpdateInfoStatusReq) Reset() {
	*x = UpdateInfoStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfoStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfoStatusReq) ProtoMessage() {}

func (x *UpdateInfoStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfoStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateInfoStatusReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateInfoStatusReq) GetMStatus() uint32 {
	if x != nil {
		return x.MStatus
	}
	return 0
}

// 删除视频 请求参数
type DelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid uint32 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"` // 视频 ID
}

func (x *DelInfoReq) Reset() {
	*x = DelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInfoReq) ProtoMessage() {}

func (x *DelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInfoReq.ProtoReflect.Descriptor instead.
func (*DelInfoReq) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{9}
}

func (x *DelInfoReq) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

// 用户注册 响应参数
type RegisterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`     // 返回码
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 返回信息
	Result bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果，false-登录失败 true-登录成功
}

func (x *RegisterRsp) Reset() {
	*x = RegisterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRsp) ProtoMessage() {}

func (x *RegisterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRsp.ProtoReflect.Descriptor instead.
func (*RegisterRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RegisterRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RegisterRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 检查用户名重复 响应参数
type CheckUserNameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`     // 返回码
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 返回信息
	Result bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果，false-不重复 true-重复
}

func (x *CheckUserNameRsp) Reset() {
	*x = CheckUserNameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameRsp) ProtoMessage() {}

func (x *CheckUserNameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameRsp.ProtoReflect.Descriptor instead.
func (*CheckUserNameRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{11}
}

func (x *CheckUserNameRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckUserNameRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckUserNameRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 用户登录 响应参数
type LoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`    // 返回码
	Msg    string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`       // 返回信息
	Result *LoginRsp_Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{12}
}

func (x *LoginRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LoginRsp) GetResult() *LoginRsp_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// 获取视频列表 响应参数
type GetListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`    // 返回码
	Msg    string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`       // 返回信息
	Result *GetListRsp_Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *GetListRsp) Reset() {
	*x = GetListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRsp) ProtoMessage() {}

func (x *GetListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRsp.ProtoReflect.Descriptor instead.
func (*GetListRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{13}
}

func (x *GetListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetListRsp) GetResult() *GetListRsp_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// 获取视频排行榜 响应参数
type GetLeaderboardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`    // 返回码
	Msg    string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`       // 返回信息
	Result []*GetLeaderboardRsp_List `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *GetLeaderboardRsp) Reset() {
	*x = GetLeaderboardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderboardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardRsp) ProtoMessage() {}

func (x *GetLeaderboardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardRsp.ProtoReflect.Descriptor instead.
func (*GetLeaderboardRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{14}
}

func (x *GetLeaderboardRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetLeaderboardRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetLeaderboardRsp) GetResult() []*GetLeaderboardRsp_List {
	if x != nil {
		return x.Result
	}
	return nil
}

// 视频详情 响应参数
type GetInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`    // 返回码
	Msg    string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`       // 返回信息
	Result *GetInfoRsp_Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *GetInfoRsp) Reset() {
	*x = GetInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRsp) ProtoMessage() {}

func (x *GetInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRsp.ProtoReflect.Descriptor instead.
func (*GetInfoRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{15}
}

func (x *GetInfoRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetInfoRsp) GetResult() *GetInfoRsp_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// 记录 响应参数
type RecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`     // 返回码
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 返回信息
	Result bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *RecordRsp) Reset() {
	*x = RecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRsp) ProtoMessage() {}

func (x *RecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRsp.ProtoReflect.Descriptor instead.
func (*RecordRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{16}
}

func (x *RecordRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RecordRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RecordRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 视频管理 响应参数
type ManageInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`     // 返回码
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 返回信息
	Result bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"` // 返回结果
}

func (x *ManageInfoRsp) Reset() {
	*x = ManageInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageInfoRsp) ProtoMessage() {}

func (x *ManageInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageInfoRsp.ProtoReflect.Descriptor instead.
func (*ManageInfoRsp) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{17}
}

func (x *ManageInfoRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ManageInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ManageInfoRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ManageInfoReq_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MUrl          string  `protobuf:"bytes,1,opt,name=mUrl,proto3" json:"mUrl,omitempty"`                    // 电影 URL
	MName         string  `protobuf:"bytes,2,opt,name=mName,proto3" json:"mName,omitempty"`                  // 电影名
	MPoster       string  `protobuf:"bytes,3,opt,name=mPoster,proto3" json:"mPoster,omitempty"`              // 电影海报
	MTypeID       uint32  `protobuf:"varint,4,opt,name=mTypeID,proto3" json:"mTypeID,omitempty"`             // 电影类型 ID
	MTypeName     string  `protobuf:"bytes,5,opt,name=mTypeName,proto3" json:"mTypeName,omitempty"`          // 电影类型
	MDouBanScore  float32 `protobuf:"fixed32,6,opt,name=mDouBanScore,proto3" json:"mDouBanScore,omitempty"`  // 豆瓣评分
	MDirector     string  `protobuf:"bytes,7,opt,name=mDirector,proto3" json:"mDirector,omitempty"`          // 电影导演
	MStarring     string  `protobuf:"bytes,8,opt,name=mStarring,proto3" json:"mStarring,omitempty"`          // 电影主演
	MCountryID    uint32  `protobuf:"varint,9,opt,name=mCountryID,proto3" json:"mCountryID,omitempty"`       // 电影制片国家/地区 ID
	MCountryName  string  `protobuf:"bytes,10,opt,name=mCountryName,proto3" json:"mCountryName,omitempty"`   // 电影制片国家/地区
	MLanguageID   uint32  `protobuf:"varint,11,opt,name=mLanguageID,proto3" json:"mLanguageID,omitempty"`    // 电影语言
	MLanguageName string  `protobuf:"bytes,12,opt,name=mLanguageName,proto3" json:"mLanguageName,omitempty"` // 电影语言
	MDateYear     uint32  `protobuf:"varint,13,opt,name=mDateYear,proto3" json:"mDateYear,omitempty"`        // 电影上映年份
	MDate         string  `protobuf:"bytes,14,opt,name=mDate,proto3" json:"mDate,omitempty"`                 // 电影上映日期
	MDesc         string  `protobuf:"bytes,15,opt,name=mDesc,proto3" json:"mDesc,omitempty"`                 // 电影简介
}

func (x *ManageInfoReq_List) Reset() {
	*x = ManageInfoReq_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageInfoReq_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageInfoReq_List) ProtoMessage() {}

func (x *ManageInfoReq_List) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageInfoReq_List.ProtoReflect.Descriptor instead.
func (*ManageInfoReq_List) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ManageInfoReq_List) GetMUrl() string {
	if x != nil {
		return x.MUrl
	}
	return ""
}

func (x *ManageInfoReq_List) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *ManageInfoReq_List) GetMPoster() string {
	if x != nil {
		return x.MPoster
	}
	return ""
}

func (x *ManageInfoReq_List) GetMTypeID() uint32 {
	if x != nil {
		return x.MTypeID
	}
	return 0
}

func (x *ManageInfoReq_List) GetMTypeName() string {
	if x != nil {
		return x.MTypeName
	}
	return ""
}

func (x *ManageInfoReq_List) GetMDouBanScore() float32 {
	if x != nil {
		return x.MDouBanScore
	}
	return 0
}

func (x *ManageInfoReq_List) GetMDirector() string {
	if x != nil {
		return x.MDirector
	}
	return ""
}

func (x *ManageInfoReq_List) GetMStarring() string {
	if x != nil {
		return x.MStarring
	}
	return ""
}

func (x *ManageInfoReq_List) GetMCountryID() uint32 {
	if x != nil {
		return x.MCountryID
	}
	return 0
}

func (x *ManageInfoReq_List) GetMCountryName() string {
	if x != nil {
		return x.MCountryName
	}
	return ""
}

func (x *ManageInfoReq_List) GetMLanguageID() uint32 {
	if x != nil {
		return x.MLanguageID
	}
	return 0
}

func (x *ManageInfoReq_List) GetMLanguageName() string {
	if x != nil {
		return x.MLanguageName
	}
	return ""
}

func (x *ManageInfoReq_List) GetMDateYear() uint32 {
	if x != nil {
		return x.MDateYear
	}
	return 0
}

func (x *ManageInfoReq_List) GetMDate() string {
	if x != nil {
		return x.MDate
	}
	return ""
}

func (x *ManageInfoReq_List) GetMDesc() string {
	if x != nil {
		return x.MDesc
	}
	return ""
}

type LoginRsp_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`         // 用户 token
	LoginTime string `protobuf:"bytes,2,opt,name=loginTime,proto3" json:"loginTime,omitempty"` // 登录时间
}

func (x *LoginRsp_Result) Reset() {
	*x = LoginRsp_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp_Result) ProtoMessage() {}

func (x *LoginRsp_Result) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp_Result.ProtoReflect.Descriptor instead.
func (*LoginRsp_Result) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{12, 0}
}

func (x *LoginRsp_Result) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginRsp_Result) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

type GetListRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid           uint32  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`                    // 电影ID
	MName         string  `protobuf:"bytes,2,opt,name=mName,proto3" json:"mName,omitempty"`                 // 电影名
	MPoster       string  `protobuf:"bytes,3,opt,name=mPoster,proto3" json:"mPoster,omitempty"`             // 电影海报
	MTypeName     string  `protobuf:"bytes,4,opt,name=mTypeName,proto3" json:"mTypeName,omitempty"`         // 电影类型
	MDouBanScore  float32 `protobuf:"fixed32,5,opt,name=mDouBanScore,proto3" json:"mDouBanScore,omitempty"` // 豆瓣评分
	MDirector     string  `protobuf:"bytes,6,opt,name=mDirector,proto3" json:"mDirector,omitempty"`         // 电影导演
	MStarring     string  `protobuf:"bytes,7,opt,name=mStarring,proto3" json:"mStarring,omitempty"`         // 电影主演
	MCountryName  string  `protobuf:"bytes,8,opt,name=mCountryName,proto3" json:"mCountryName,omitempty"`   // 电影制片国家/地区
	MLanguageName string  `protobuf:"bytes,9,opt,name=mLanguageName,proto3" json:"mLanguageName,omitempty"` // 电影语言
	MDateYear     uint32  `protobuf:"varint,10,opt,name=mDateYear,proto3" json:"mDateYear,omitempty"`       // 电影上映年份
	MDate         string  `protobuf:"bytes,11,opt,name=mDate,proto3" json:"mDate,omitempty"`                // 电影上映日期
	MViews        uint32  `protobuf:"varint,12,opt,name=mViews,proto3" json:"mViews,omitempty"`             // 电影播放量
	MLikes        uint32  `protobuf:"varint,13,opt,name=mLikes,proto3" json:"mLikes,omitempty"`             // 电影点赞量
	MCollects     uint32  `protobuf:"varint,14,opt,name=mCollects,proto3" json:"mCollects,omitempty"`       // 电影收藏量
	CreateTime    string  `protobuf:"bytes,15,opt,name=createTime,proto3" json:"createTime,omitempty"`      // 创建时间
	UpdateTime    string  `protobuf:"bytes,16,opt,name=updateTime,proto3" json:"updateTime,omitempty"`      // 更新时间
}

func (x *GetListRsp_List) Reset() {
	*x = GetListRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRsp_List) ProtoMessage() {}

func (x *GetListRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRsp_List.ProtoReflect.Descriptor instead.
func (*GetListRsp_List) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetListRsp_List) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *GetListRsp_List) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *GetListRsp_List) GetMPoster() string {
	if x != nil {
		return x.MPoster
	}
	return ""
}

func (x *GetListRsp_List) GetMTypeName() string {
	if x != nil {
		return x.MTypeName
	}
	return ""
}

func (x *GetListRsp_List) GetMDouBanScore() float32 {
	if x != nil {
		return x.MDouBanScore
	}
	return 0
}

func (x *GetListRsp_List) GetMDirector() string {
	if x != nil {
		return x.MDirector
	}
	return ""
}

func (x *GetListRsp_List) GetMStarring() string {
	if x != nil {
		return x.MStarring
	}
	return ""
}

func (x *GetListRsp_List) GetMCountryName() string {
	if x != nil {
		return x.MCountryName
	}
	return ""
}

func (x *GetListRsp_List) GetMLanguageName() string {
	if x != nil {
		return x.MLanguageName
	}
	return ""
}

func (x *GetListRsp_List) GetMDateYear() uint32 {
	if x != nil {
		return x.MDateYear
	}
	return 0
}

func (x *GetListRsp_List) GetMDate() string {
	if x != nil {
		return x.MDate
	}
	return ""
}

func (x *GetListRsp_List) GetMViews() uint32 {
	if x != nil {
		return x.MViews
	}
	return 0
}

func (x *GetListRsp_List) GetMLikes() uint32 {
	if x != nil {
		return x.MLikes
	}
	return 0
}

func (x *GetListRsp_List) GetMCollects() uint32 {
	if x != nil {
		return x.MCollects
	}
	return 0
}

func (x *GetListRsp_List) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetListRsp_List) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type GetListRsp_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 总量
	List  []*GetListRsp_List `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 列表
}

func (x *GetListRsp_Result) Reset() {
	*x = GetListRsp_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRsp_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRsp_Result) ProtoMessage() {}

func (x *GetListRsp_Result) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRsp_Result.ProtoReflect.Descriptor instead.
func (*GetListRsp_Result) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GetListRsp_Result) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetListRsp_Result) GetList() []*GetListRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetLeaderboardRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid    uint32 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`       // 电影ID
	MName  string `protobuf:"bytes,2,opt,name=mName,proto3" json:"mName,omitempty"`    // 电影名
	MTotal uint32 `protobuf:"varint,3,opt,name=mTotal,proto3" json:"mTotal,omitempty"` // 电影记录总量
}

func (x *GetLeaderboardRsp_List) Reset() {
	*x = GetLeaderboardRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderboardRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardRsp_List) ProtoMessage() {}

func (x *GetLeaderboardRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardRsp_List.ProtoReflect.Descriptor instead.
func (*GetLeaderboardRsp_List) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetLeaderboardRsp_List) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *GetLeaderboardRsp_List) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *GetLeaderboardRsp_List) GetMTotal() uint32 {
	if x != nil {
		return x.MTotal
	}
	return 0
}

type GetInfoRsp_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid           uint32  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`                     // 电影ID
	MUrl          string  `protobuf:"bytes,2,opt,name=mUrl,proto3" json:"mUrl,omitempty"`                    // 电影URL
	MName         string  `protobuf:"bytes,3,opt,name=mName,proto3" json:"mName,omitempty"`                  // 电影名
	MPoster       string  `protobuf:"bytes,4,opt,name=mPoster,proto3" json:"mPoster,omitempty"`              // 电影海报
	MTypeName     string  `protobuf:"bytes,5,opt,name=mTypeName,proto3" json:"mTypeName,omitempty"`          // 电影类型
	MDouBanScore  float32 `protobuf:"fixed32,6,opt,name=mDouBanScore,proto3" json:"mDouBanScore,omitempty"`  // 豆瓣评分
	MDirector     string  `protobuf:"bytes,7,opt,name=mDirector,proto3" json:"mDirector,omitempty"`          // 电影导演
	MStarring     string  `protobuf:"bytes,8,opt,name=mStarring,proto3" json:"mStarring,omitempty"`          // 电影主演
	MCountryName  string  `protobuf:"bytes,9,opt,name=mCountryName,proto3" json:"mCountryName,omitempty"`    // 电影制片国家/地区
	MLanguageName string  `protobuf:"bytes,10,opt,name=mLanguageName,proto3" json:"mLanguageName,omitempty"` // 电影语言
	MDate         string  `protobuf:"bytes,11,opt,name=mDate,proto3" json:"mDate,omitempty"`                 // 电影上映日期
	MDesc         string  `protobuf:"bytes,12,opt,name=mDesc,proto3" json:"mDesc,omitempty"`                 // 电影简介
}

func (x *GetInfoRsp_Result) Reset() {
	*x = GetInfoRsp_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRsp_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRsp_Result) ProtoMessage() {}

func (x *GetInfoRsp_Result) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRsp_Result.ProtoReflect.Descriptor instead.
func (*GetInfoRsp_Result) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetInfoRsp_Result) GetMid() uint32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *GetInfoRsp_Result) GetMUrl() string {
	if x != nil {
		return x.MUrl
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMPoster() string {
	if x != nil {
		return x.MPoster
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMTypeName() string {
	if x != nil {
		return x.MTypeName
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMDouBanScore() float32 {
	if x != nil {
		return x.MDouBanScore
	}
	return 0
}

func (x *GetInfoRsp_Result) GetMDirector() string {
	if x != nil {
		return x.MDirector
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMStarring() string {
	if x != nil {
		return x.MStarring
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMCountryName() string {
	if x != nil {
		return x.MCountryName
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMLanguageName() string {
	if x != nil {
		return x.MLanguageName
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMDate() string {
	if x != nil {
		return x.MDate
	}
	return ""
}

func (x *GetInfoRsp_Result) GetMDesc() string {
	if x != nil {
		return x.MDesc
	}
	return ""
}

var File_movie_proto protoreflect.FileDescriptor

var file_movie_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x2e, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x44, 0x6f, 0x75, 0x42, 0x61, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x44, 0x6f, 0x75,
	0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x29, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x04, 0x0a,
	0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x43,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0xb8, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x44, 0x6f, 0x75,
	0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x44, 0x6f, 0x75, 0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x22, 0x2f,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22,
	0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x05, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0xd2, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x44, 0x6f, 0x75, 0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6d, 0x44, 0x6f, 0x75, 0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x60, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x46, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x46, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xd2, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x44, 0x6f, 0x75, 0x42, 0x61,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x44,
	0x6f, 0x75, 0x42, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x22, 0x49, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb2, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x60, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32, 0xd9, 0x01, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32, 0x83, 0x03, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32, 0xab, 0x03,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x67,
	0x69, 0x74, 0x2e, 0x77, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x6f, 0x74, 0x61,
	0x6c, 0x69, 0x75, 0x2f, 0x70, 0x62, 0x2d, 0x68, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_movie_proto_rawDescOnce sync.Once
	file_movie_proto_rawDescData = file_movie_proto_rawDesc
)

func file_movie_proto_rawDescGZIP() []byte {
	file_movie_proto_rawDescOnce.Do(func() {
		file_movie_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_proto_rawDescData)
	})
	return file_movie_proto_rawDescData
}

var file_movie_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_movie_proto_goTypes = []interface{}{
	(*RegisterReq)(nil),            // 0: trpc.MovieService.operation.RegisterReq
	(*CheckUserNameReq)(nil),       // 1: trpc.MovieService.operation.CheckUserNameReq
	(*LoginReq)(nil),               // 2: trpc.MovieService.operation.LoginReq
	(*GetListReq)(nil),             // 3: trpc.MovieService.operation.GetListReq
	(*GetLeaderboardReq)(nil),      // 4: trpc.MovieService.operation.GetLeaderboardReq
	(*GetInfoReq)(nil),             // 5: trpc.MovieService.operation.GetInfoReq
	(*RecordReq)(nil),              // 6: trpc.MovieService.operation.RecordReq
	(*ManageInfoReq)(nil),          // 7: trpc.MovieService.operation.ManageInfoReq
	(*UpdateInfoStatusReq)(nil),    // 8: trpc.MovieService.operation.UpdateInfoStatusReq
	(*DelInfoReq)(nil),             // 9: trpc.MovieService.operation.DelInfoReq
	(*RegisterRsp)(nil),            // 10: trpc.MovieService.operation.RegisterRsp
	(*CheckUserNameRsp)(nil),       // 11: trpc.MovieService.operation.CheckUserNameRsp
	(*LoginRsp)(nil),               // 12: trpc.MovieService.operation.LoginRsp
	(*GetListRsp)(nil),             // 13: trpc.MovieService.operation.GetListRsp
	(*GetLeaderboardRsp)(nil),      // 14: trpc.MovieService.operation.GetLeaderboardRsp
	(*GetInfoRsp)(nil),             // 15: trpc.MovieService.operation.GetInfoRsp
	(*RecordRsp)(nil),              // 16: trpc.MovieService.operation.RecordRsp
	(*ManageInfoRsp)(nil),          // 17: trpc.MovieService.operation.ManageInfoRsp
	(*ManageInfoReq_List)(nil),     // 18: trpc.MovieService.operation.ManageInfoReq.List
	(*LoginRsp_Result)(nil),        // 19: trpc.MovieService.operation.LoginRsp.Result
	(*GetListRsp_List)(nil),        // 20: trpc.MovieService.operation.GetListRsp.List
	(*GetListRsp_Result)(nil),      // 21: trpc.MovieService.operation.GetListRsp.Result
	(*GetLeaderboardRsp_List)(nil), // 22: trpc.MovieService.operation.GetLeaderboardRsp.List
	(*GetInfoRsp_Result)(nil),      // 23: trpc.MovieService.operation.GetInfoRsp.Result
}
var file_movie_proto_depIdxs = []int32{
	18, // 0: trpc.MovieService.operation.ManageInfoReq.list:type_name -> trpc.MovieService.operation.ManageInfoReq.List
	19, // 1: trpc.MovieService.operation.LoginRsp.result:type_name -> trpc.MovieService.operation.LoginRsp.Result
	21, // 2: trpc.MovieService.operation.GetListRsp.result:type_name -> trpc.MovieService.operation.GetListRsp.Result
	22, // 3: trpc.MovieService.operation.GetLeaderboardRsp.result:type_name -> trpc.MovieService.operation.GetLeaderboardRsp.List
	23, // 4: trpc.MovieService.operation.GetInfoRsp.result:type_name -> trpc.MovieService.operation.GetInfoRsp.Result
	20, // 5: trpc.MovieService.operation.GetListRsp.Result.list:type_name -> trpc.MovieService.operation.GetListRsp.List
	0,  // 6: trpc.MovieService.operation.User.Register:input_type -> trpc.MovieService.operation.RegisterReq
	1,  // 7: trpc.MovieService.operation.User.CheckUserName:input_type -> trpc.MovieService.operation.CheckUserNameReq
	2,  // 8: trpc.MovieService.operation.User.Login:input_type -> trpc.MovieService.operation.LoginReq
	3,  // 9: trpc.MovieService.operation.List.GetList:input_type -> trpc.MovieService.operation.GetListReq
	4,  // 10: trpc.MovieService.operation.List.GetLeaderboard:input_type -> trpc.MovieService.operation.GetLeaderboardReq
	5,  // 11: trpc.MovieService.operation.Info.GetInfo:input_type -> trpc.MovieService.operation.GetInfoReq
	6,  // 12: trpc.MovieService.operation.Info.GetRecord:input_type -> trpc.MovieService.operation.RecordReq
	6,  // 13: trpc.MovieService.operation.Info.PostRecord:input_type -> trpc.MovieService.operation.RecordReq
	6,  // 14: trpc.MovieService.operation.Info.DelRecord:input_type -> trpc.MovieService.operation.RecordReq
	7,  // 15: trpc.MovieService.operation.Manage.AddInfo:input_type -> trpc.MovieService.operation.ManageInfoReq
	7,  // 16: trpc.MovieService.operation.Manage.UpdateInfo:input_type -> trpc.MovieService.operation.ManageInfoReq
	8,  // 17: trpc.MovieService.operation.Manage.UpdateInfoStatus:input_type -> trpc.MovieService.operation.UpdateInfoStatusReq
	9,  // 18: trpc.MovieService.operation.Manage.DelInfo:input_type -> trpc.MovieService.operation.DelInfoReq
	10, // 19: trpc.MovieService.operation.User.Register:output_type -> trpc.MovieService.operation.RegisterRsp
	11, // 20: trpc.MovieService.operation.User.CheckUserName:output_type -> trpc.MovieService.operation.CheckUserNameRsp
	12, // 21: trpc.MovieService.operation.User.Login:output_type -> trpc.MovieService.operation.LoginRsp
	13, // 22: trpc.MovieService.operation.List.GetList:output_type -> trpc.MovieService.operation.GetListRsp
	14, // 23: trpc.MovieService.operation.List.GetLeaderboard:output_type -> trpc.MovieService.operation.GetLeaderboardRsp
	15, // 24: trpc.MovieService.operation.Info.GetInfo:output_type -> trpc.MovieService.operation.GetInfoRsp
	16, // 25: trpc.MovieService.operation.Info.GetRecord:output_type -> trpc.MovieService.operation.RecordRsp
	16, // 26: trpc.MovieService.operation.Info.PostRecord:output_type -> trpc.MovieService.operation.RecordRsp
	16, // 27: trpc.MovieService.operation.Info.DelRecord:output_type -> trpc.MovieService.operation.RecordRsp
	17, // 28: trpc.MovieService.operation.Manage.AddInfo:output_type -> trpc.MovieService.operation.ManageInfoRsp
	17, // 29: trpc.MovieService.operation.Manage.UpdateInfo:output_type -> trpc.MovieService.operation.ManageInfoRsp
	17, // 30: trpc.MovieService.operation.Manage.UpdateInfoStatus:output_type -> trpc.MovieService.operation.ManageInfoRsp
	17, // 31: trpc.MovieService.operation.Manage.DelInfo:output_type -> trpc.MovieService.operation.ManageInfoRsp
	19, // [19:32] is the sub-list for method output_type
	6,  // [6:19] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_movie_proto_init() }
func file_movie_proto_init() {
	if File_movie_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_movie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderboardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfoStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderboardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageInfoReq_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRsp_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderboardRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRsp_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_movie_proto_goTypes,
		DependencyIndexes: file_movie_proto_depIdxs,
		MessageInfos:      file_movie_proto_msgTypes,
	}.Build()
	File_movie_proto = out.File
	file_movie_proto_rawDesc = nil
	file_movie_proto_goTypes = nil
	file_movie_proto_depIdxs = nil
}
